import mongoose from "mongoose";
import { MongoMemoryServer } from "mongodb-memory-server";
import connectDB from "../config/db";

// WyÅ‚Ä…czamy process.exit() w testach, Å¼eby nie przerywaÅ‚ testowania
jest.spyOn(process, "exit").mockImplementation(
  (code?: string | number | null | undefined): never => {
    console.log("â›” process.exit(1) zablokowany w testach");
    throw new Error("process.exit was called with code: " + code);
  }
);

let mongoServer: MongoMemoryServer;

beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  process.env.MONGO_URI = mongoServer.getUri();
  process.env.NODE_ENV = "test"; // ğŸ‘ˆ Dodajemy tryb testowy
});

afterAll(async () => {
  await mongoose.connection.close();
  await mongoServer.stop();
});

test("Powinno poprawnie poÅ‚Ä…czyÄ‡ siÄ™ z bazÄ… danych", async () => {
  await expect(connectDB()).resolves.not.toThrow();
});

test("Powinno zwrÃ³ciÄ‡ bÅ‚Ä…d przy bÅ‚Ä™dnym URL", async () => {
  // Wymuszamy rozÅ‚Ä…czenie przed testem bÅ‚Ä™dnego URL,
  // aby Mongoose nie korzystaÅ‚ z juÅ¼ nawiÄ…zanych poÅ‚Ä…czeÅ„.
  await mongoose.disconnect();
  process.env.MONGO_URI = "mongodb://niepoprawny_adres:27017/test";
  await expect(connectDB()).rejects.toThrow("BÅ‚Ä…d poÅ‚Ä…czenia z MongoDB");
});
